import math
import pygame
import random
from pygame import mixer

pygame.init()
screen = pygame.display.set_mode((800, 500)) #first argument is width, second argument is height

#Title change and icon
pygame.display.set_caption("Space Invaders")
icon = pygame.image.load('space-invaders.png')
pygame.display.set_icon(icon)

#background image
background = pygame.image.load('background.png')

#background sound
mixer.music.load('background (1).wav')
mixer.music.play(-1)

#Player
playerImg = pygame.image.load('battleship.png')
playerX = 370
playerY = 300

#Enemy
enemyImg =[]
enemyX = []
enemyY = []
enemyX_change = []
enemyY_change = []
num_of_enemies = 6
for i in range(num_of_enemies):
    enemyImg.append(pygame.image.load('alien.png'))
    enemyImg.append(pygame.image.load('alien.png'))
    enemyX.append(random.randint(0, 750))
    enemyY.append(random.randint(50, 150))
    enemyX_change.append(1.5)
    enemyY_change.append(10)


#bullet
bulletImg = pygame.image.load('bullet.png')
bulletX = 0
bulletY = 300
bulletX_change = 0 #useless tbh
bulletY_change = 10
bullet_state = "ready" #ready state means you can't see bullet on the screen, fire state means bullet is moving and is visible

#game over 
over_font = pygame.font.Font('freesansbold.ttf', 64)
def game_over():
    over_text = over_font.render("GAME OVER", True, (237, 17, 19))
    screen.blit(over_text, (200, 250))

#score
score = 0
font = pygame.font.Font('freesansbold.ttf', 32)
textX = 10
textY = 10

def show_score(x, y):
    score_value = font.render("Score: " + str(score), True, (66, 245, 78))
    screen.blit(score_value, (x,y))

def fire_bullet(x,y):
    global bullet_state
    bullet_state = "fire"
    screen.blit(bulletImg,(x + 16,y + 10))

#collision
def is_collision(enemyX, enemyY, bulletX, bulletY):
    distance = math.sqrt(math.pow(enemyX - bulletX, 2) + (math.pow(enemyY - bulletY, 2)))
    if distance < 27:
        return True
    return False

def player(playerX, playerY):
    screen.blit(playerImg, (playerX,playerY))

def enemy(x, y, i):
    screen.blit(enemyImg[i], (x,y))


running = True
while running:
    screen.fill((0,0,0))  #change background colour uses rbg-255 scale
    #playerY -= 0.1 #bottom of screen is 600, top is 0. Left of screen is 0, right is 800

    #background image
    screen.blit(background, (0,0))

    playerX_change = 0
    playerY_change = 0

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        if event.type == pygame.KEYDOWN: #Checks  if key is pressed during runtime
            if event.key == pygame.K_LEFT: #Checks if key being pressed is left
                playerX_change = -20
            if event.key == pygame.K_RIGHT:
                playerX_change = 20 #10's
            if event.key == pygame.K_SPACE:
                if bullet_state == "ready":
                    mixer.Sound('laser.wav').play()
                    bulletX = playerX
                    fire_bullet(bulletX, bulletY)

        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
                playerX_change = 0
    playerX += playerX_change
    if playerX <= 64:
        playerX = 64
    elif playerX >= 736:
        playerX = 736;

    #enemy movement
    for i in range(num_of_enemies):

        #game over
        if enemyY[i] > 300:
            for j in range(num_of_enemies):
                enemyY[j] = 2000
            game_over()
            break

        enemyX[i] += enemyX_change[i]
        if enemyX[i] <= 0:
            enemyX_change[i] = 2
            enemyY[i] += enemyY_change[i]
        elif enemyX[i] >= 736:
            enemyX_change[i] = -2
            enemyY[i] += enemyY_change[i]

        # collision
        collision = is_collision(enemyX[i], enemyY[i], bulletX, bulletY)
        if collision:
            mixer.Sound('explosion.wav').play()
            bulletY = 300
            bullet_state = "ready"
            score += 1
            enemyX[i] = random.randint(0, 750)
            enemyY[i] = random.randint(50, 150)
        enemy(enemyX[i], enemyY[i], i)

    #bullet movement
    if bulletY<= 0:
        bulletY = 300
        bullet_state = "ready"
    if bullet_state == "fire":
        fire_bullet(bulletX, bulletY)
        bulletY -= bulletY_change




    player(playerX, playerY)
    show_score(textX, textY)
    pygame.display.update() #Use this line of code within a loop to make sure display updates in real-time


